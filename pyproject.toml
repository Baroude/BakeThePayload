[project]
name = "vulnerability-analyzer"
version = "0.1.0"
description = "Advanced vulnerability analysis system with structured Pydantic models for security data processing"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "aiohttp>=3.12.15",
    "aioresponses>=0.7.8",
    "asyncio-throttle>=1.0.2",
    "bandit>=1.8.6",
    "black>=25.1.0",
    "cachetools>=6.2.0",
    "isort>=6.0.1",
    "mypy>=1.17.1",
    "packaging>=25.0",
    "pydantic>=2.11.7",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-mock>=3.14.1",
    "python-dotenv>=1.1.1",
    "zstandard>=0.24.0",
]

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "psutil>=7.0.0",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.2.1",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["models", "parsers"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
markers = [
    "benchmark: performance benchmark tests",
    "integration: integration tests",
    "unit: unit tests"
]

[tool.coverage.run]
source = ["models", "parsers"]
omit = [
    "tests/*",
    "test_*.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]
