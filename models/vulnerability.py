from datetime import datetime
from typing import Dict, List, Optional
from uuid import UUID

from pydantic import Field, field_validator

from .base import SecurityBaseModel, SeverityEnum, Reference, validate_confidence_score


class Evidence(SecurityBaseModel):
    type: str = Field(..., description="Type of evidence (code, file, pattern, etc.)")
    content: str = Field(..., description="Evidence content or description")
    file_path: Optional[str] = Field(default=None, description="File path if applicable")
    line_number: Optional[int] = Field(default=None, description="Line number if applicable")
    confidence: float = Field(..., description="Confidence score for this evidence")
    
    @field_validator('confidence')
    @classmethod
    def validate_confidence(cls, v: float) -> float:
        return validate_confidence_score(v)


class VulnerabilityReport(SecurityBaseModel):
    advisory_id: str = Field(..., description="Official advisory identifier")
    title: str = Field(..., description="Vulnerability title")
    description: str = Field(..., description="Detailed vulnerability description")
    severity: SeverityEnum = Field(..., description="Vulnerability severity level")
    cvss_score: Optional[float] = Field(default=None, description="CVSS base score")
    cvss_vector: Optional[str] = Field(default=None, description="CVSS vector string")
    cwe_ids: List[str] = Field(default_factory=list, description="CWE identifiers")
    references: List[Reference] = Field(default_factory=list, description="External references")
    published_at: Optional[datetime] = Field(default=None, description="Publication date")
    summary: Optional[str] = Field(default=None, description="Brief summary")
    evidence: List[Evidence] = Field(default_factory=list, description="Supporting evidence")
    
    @field_validator('cvss_score')
    @classmethod
    def validate_cvss_score(cls, v: Optional[float]) -> Optional[float]:
        if v is not None:
            if not 0.0 <= v <= 10.0:
                raise ValueError("CVSS score must be between 0.0 and 10.0")
        return v
    
    @field_validator('cwe_ids')
    @classmethod
    def validate_cwe_ids(cls, v: List[str]) -> List[str]:
        import re
        for cwe_id in v:
            if not re.match(r'^CWE-\d+$', cwe_id):
                raise ValueError(f"Invalid CWE ID format: {cwe_id}")
        return v